# ======================================================================
# REMINDER APP ENVIRONMENT CONFIGURATION EXAMPLE
# ======================================================================
#
# SETUP INSTRUCTIONS:
# 
# 1. SETTING THE ENVIRONMENT TYPE:
#    The ENV variable must be set OUTSIDE this file - not here!
#    
#    Set it in the terminal before running the app:
#      Linux/Mac:  export ENV=development
#      Windows:    set ENV=development  or  $env:ENV = "development"
#    
#    Or directly when launching:
#      ENV=development uvicorn app.main:app --reload
#    
#    Based on this ENV value, the app will load either:
#    - .env.development
#    - .env.testing 
#    - .env.production
#
# 2. CREATING YOUR ENV FILE:
#    Copy this example to create the appropriate file:
#      cp .env.example .env.development
#    
#    Then edit the file to set values for your environment.
#
# 3. SECURITY NOTE:
#    - Never commit your actual .env.* files to version control
#    - Use strong, unique values for sensitive settings like SECRET_KEY
#
# ======================================================================

# Whether to enforce strict validation of sensitive data
# Set to True in production, can be False in development for easier debugging
STRICT_VALIDATION=False

# ======================================================================
# DATABASE CONFIGURATION
# ======================================================================

# Database connection details
DB_HOST=localhost                 # Host of the database server
DB_PORT=3306                      # MySQL default port
DB_USER=your_db_username          # Database username
DB_PASSWORD=your_db_password      # Database password
DB_NAME=reminder_app_db           # Database name

# Connection pool settings
DB_POOL_SIZE=5                    # Initial pool size
DB_MAX_OVERFLOW=10                # Extra connections when pool is full
DB_POOL_TIMEOUT=30                # Timeout for getting a connection (seconds)

# Alternative: direct database URI (optional, constructed from above if not provided)
# SQLALCHEMY_DATABASE_URI=mysql+pymysql://user:password@localhost:3306/dbname

# ======================================================================
# SECURITY CONFIGURATION
# ======================================================================

# Secret key for JWT token signing and encryption
# CRITICAL: Use a strong, unique value in production!
# Generate with: python -c "import secrets; print(secrets.token_urlsafe(32))"
SECRET_KEY=your-secret-key-here

# JWT configuration
ALGORITHM=HS256                            # Algorithm for JWT tokens
JWT_TOKEN_PREFIX=Bearer                    # Prefix for Authorization header
ACCESS_TOKEN_EXPIRE_MINUTES=30             # Access token lifetime
REFRESH_TOKEN_EXPIRE_DAYS=7                # Refresh token lifetime
PASSWORD_RESET_TOKEN_EXPIRE_MINUTES=15     # Password reset token lifetime

# Cookie security automatically set as FALSE in development True for anything else can be overriden
# there is a validator for this in the produciton settings to be sure to enforce it in production
# SECURE_COOKIES=true                       # Force HTTPS for cookies in production

# ======================================================================
# API CONFIGURATION
# ======================================================================
API_V1_STR=/api/v1                         # API version prefix

# API Documentation URLs (set empty to disable)
DOCS_URL=/docs                             # Swagger UI URL
REDOC_URL=/redoc                           # ReDoc UI URL
OPENAPI_URL=/openapi.json                  # OpenAPI schema URL

# ======================================================================
# CORS CONFIGURATION
# ======================================================================

# Allowed origins for CORS requests (comma-separated)
# For multiple origins: http://localhost:3000,http://localhost:4200
CORS_ORIGINS=http://localhost:3000         # Frontend URL(s)
CORS_ALLOW_CREDENTIALS=True                # Allow credentials in CORS requests

# ======================================================================
# EMAIL CONFIGURATION
# ======================================================================

# SMTP settings for sending emails
SMTP_HOST=smtp.example.com                 # SMTP server hostname
SMTP_PORT=587                              # SMTP port (587 for TLS)
SMTP_USER=your_smtp_username               # SMTP username
SMTP_PASSWORD=your_smtp_password           # SMTP password
EMAIL_FROM=noreply@yourdomain.com          # Sender email address

# ======================================================================
# SMS CONFIGURATION (TWILIO)
# ======================================================================

# Twilio credentials for SMS notifications
TWILIO_ACCOUNT_SID=your_twilio_sid         # Twilio account SID
TWILIO_AUTH_TOKEN=your_twilio_token        # Twilio auth token
TWILIO_PHONE_NUMBER=+1234567890            # Twilio phone number

# ======================================================================
# WHATSAPP CONFIGURATION
# ======================================================================

# WhatsApp API credentials
WHATSAPP_API_KEY=your_whatsapp_api_key     # WhatsApp API key
WHATSAPP_API_URL=https://api.example.com   # WhatsApp API endpoint

# ======================================================================
# PAYMENT CONFIGURATION (STRIPE)
# ======================================================================

# Stripe integration for payments
STRIPE_API_KEY=your_stripe_api_key         # Stripe API key
STRIPE_WEBHOOK_SECRET=your_webhook_secret  # Stripe webhook secret
PAYMENT_SUCCESS_URL=http://localhost:3000/payment/success  # Redirect URL after successful payment
PAYMENT_CANCEL_URL=http://localhost:3000/payment/cancel    # Redirect URL after canceled payment

# ======================================================================
# STORAGE CONFIGURATION
# ======================================================================

# Storage type: 'local' or 's3'
STORAGE_TYPE=local                         # Use local filesystem for development

# S3 configuration (only needed if STORAGE_TYPE=s3)
S3_BUCKET_NAME=your-bucket-name            # S3 bucket name
S3_ACCESS_KEY=your_s3_access_key           # S3 access key
S3_SECRET_KEY=your_s3_secret_key           # S3 secret key
S3_REGION=us-east-1                        # S3 region
S3_OBJECT_ACL=private                      # S3 object ACL (private or public-read)

# ======================================================================
# RATE LIMITING
# ======================================================================

# API rate limiting configuration
RATE_LIMIT_ENABLED=true                    # Enable rate limiting
DEFAULT_RATE_LIMIT=100/minute              # Default rate limit

# ======================================================================
# LOGGING CONFIGURATION
# ======================================================================

# Logging settings
# a validator is enforced in the development settings to be sure to enforce debug in development
LOG_LEVEL=INFO                             # Log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)
LOG_FORMAT=%(asctime)s - %(name)s - %(levelname)s - %(message)s  # Log format

# ======================================================================
# SCHEDULER CONFIGURATION
# ======================================================================

# Scheduler for reminders
SCHEDULER_TIMEZONE=UTC                     # Timezone for scheduled tasks

# ======================================================================
# REDIS CONFIGURATION
# ======================================================================

# Redis connection settings
REDIS_URL=redis://localhost:6379/0         # Redis connection URL
REDIS_PASSWORD=your_redis_password         # Redis password (optional for local development)
REDIS_SSL_ENABLED=false                   # Enable SSL for Redis connection
REDIS_CONNECTION_TIMEOUT=5                 # Connection timeout in seconds
REDIS_HEALTH_CHECK_INTERVAL=30             # Health check interval in seconds

# ======================================================================
# ENVIRONMENT-SPECIFIC RECOMMENDATIONS
# ======================================================================
#
# DEVELOPMENT:
# - STRICT_VALIDATION=False (for easier debugging)
# - LOG_LEVEL=DEBUG (detailed logging)
# - STORAGE_TYPE=local (simplifies local development)
# - Use services like Mailtrap.io for email testing
# - Use Twilio's test credentials for SMS
# - Use Stripe's test API keys
# - Use local Redis instance or Docker
#
# TESTING:
# - STRICT_VALIDATION=True (catch issues early)
# - Use a separate database for tests
# - Consider using SQLite for simpler test setup:
#   SQLALCHEMY_DATABASE_URI=sqlite:///./test.db
# - Use local Redis instance or Docker
#
# PRODUCTION:
# - STRICT_VALIDATION=True (enforce all validations)
# - LOG_LEVEL=INFO (balance between details and volume)
# - Use a secure database with proper credentials
# - STORAGE_TYPE=s3 (if using cloud storage)
# - Use production API keys for all services
# - Ensure SECRET_KEY is strong and secure
# - Configure proper security headers
# - Use secure Redis instance (e.g., AWS ElastiCache)
# - Enable Redis SSL
# - Use strong Redis password
#
# ======================================================================